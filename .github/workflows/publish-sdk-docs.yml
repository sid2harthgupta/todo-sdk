name: Update SDK Documentation
on:
  push:
    branches: [main]
    paths:
      - 'src/**/*.py'
      - 'pyproject.toml'
      - '.github/workflows/publish-sdk-docs.yml'  # Trigger on workflow changes
  workflow_dispatch:  # Allow manual triggering

jobs:
  update-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout SDK repository
        uses: actions/checkout@v3
        with:
          path: sdk

      - name: Checkout docs repository
        uses: actions/checkout@v3
        with:
          repository: sid2harthgupta/docs
          token: ${{ secrets.DOCS_PUSH_TOKEN }}
          path: docs

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        working-directory: sdk
        run: |
          pip install requests

      - name: Create SDK documentation directory
        run: |
          mkdir -p docs/sdk-reference

      - name: Generate SDK documentation
        working-directory: sdk
        run: |
          cat > generate_sdk_docs.py << 'SCRIPT_END'
          """Generate MDX documentation for the SDK"""
          import inspect
          import json
          from pathlib import Path
          import sys
          sys.path.insert(0, 'src')
          from todo_sdk_python.todo_sdk import TodoClient
          
          def extract_method_docs(cls):
              """Extract documentation from class methods"""
              methods = []
              for name, method in inspect.getmembers(cls, inspect.isfunction):
                  if not name.startswith('_'):
                      sig = inspect.signature(method)
                      doc = inspect.getdoc(method) or ""
                      
                      # Parse docstring sections
                      lines = doc.split('\n')
                      description = []
                      args = {}
                      returns = ""
                      example = []
                      
                      section = "description"
                      for line in lines:
                          line = line.strip()
                          if line.startswith("Args:"):
                              section = "args"
                          elif line.startswith("Returns:"):
                              section = "returns"
                          elif line.startswith("Example:"):
                              section = "example"
                          elif section == "description" and line:
                              description.append(line)
                          elif section == "args" and ":" in line:
                              arg_name, arg_desc = line.split(":", 1)
                              args[arg_name.strip()] = arg_desc.strip()
                          elif section == "returns" and line and not line.startswith("Returns:"):
                              returns = line
                          elif section == "example" and line:
                              example.append(line)
                      
                      methods.append({
                          "name": name,
                          "signature": str(sig),
                          "description": " ".join(description),
                          "args": args,
                          "returns": returns,
                          "example": "\n".join(example)
                      })
              return methods
          
          def generate_mdx():
              """Generate MDX documentation files"""
              docs_dir = Path("../docs/sdk-reference")
              docs_dir.mkdir(exist_ok=True)
              
              # Generate main SDK page
              main_content = """---
          title: 'Python SDK'
          description: 'Official Python SDK for the Todo API'
          icon: 'python'
          ---
          
          ## Installation
          
          Install the SDK using pip:
          
          ```bash
          pip install todo-sdk-python
          ```
          
          ## Quick Start
          
          ```python
          from todo_sdk_python.todo_sdk import TodoClient
          
          # Initialize the client
          client = TodoClient(base_url="http://localhost:8000")
          
          # Get a todo
          todo = client.get_todo(1)
          print(todo)
          
          # Create a new todo
          new_todo = client.create_todo(id=2, title="Buy groceries")
          print(new_todo)
          ```
          
          ## Configuration
          
          The `TodoClient` accepts the following parameters:
          
          <ParamField path="base_url" type="string" default="http://localhost:8000">
            The base URL of the Todo API server
          </ParamField>
          
          ## Available Methods
          
          <Card title="get_todo" icon="search" href="/sdk-reference/get_todo">
            Retrieve a todo by its ID
          </Card>
          
          <Card title="create_todo" icon="plus" href="/sdk-reference/create_todo">
            Create a new todo item
          </Card>
          """
              
              with open(docs_dir / "introduction.mdx", "w") as f:
                  f.write(main_content)
              
              # Generate TodoClient documentation
              methods = extract_method_docs(TodoClient)
              
              client_content = """---
          title: 'TodoClient'
          description: 'Main client class for interacting with the Todo API'
          ---
          
          ## Initialization
          
          ```python
          from todo_sdk_python.todo_sdk import TodoClient
          
          client = TodoClient(base_url="http://localhost:8000")
          ```
          
          <ParamField path="base_url" type="string" default="http://localhost:8000">
            The base URL of the Todo API server. This should point to your API instance.
          </ParamField>
          
          ## Methods
          
          """
              
              for method in methods:
                  if method["name"] == "__init__":
                      continue
                  
                  # Add method section
                  client_content += f"""### {method["name"]}
          
          {method["description"]}
          
          <CodeGroup>
          ```python Signature
          {method["name"]}{method["signature"]}
          ```
          """
                  
                  # Add example if available
                  if method["example"]:
                      client_content += f"""
          ```python Example
          {method["example"]}
          ```
          """
                  
                  client_content += "</CodeGroup>\n\n"
                  
                  # Add parameters
                  if method["args"]:
                      client_content += "#### Parameters\n\n"
                      for arg_name, arg_desc in method["args"].items():
                          client_content += f'<ParamField path="{arg_name}" type="any" required>\n  {arg_desc}\n</ParamField>\n\n'
                  
                  # Add returns
                  if method["returns"]:
                      client_content += f"""#### Returns
          
          {method["returns"]}
          
          """
              
              with open(docs_dir / "client.mdx", "w") as f:
                  f.write(client_content)
              
              # Generate method-specific pages
              for method in methods:
                  if method["name"] == "__init__":
                      continue
                  
                  method_content = f"""---
          title: '{method["name"]}'
          description: '{method["description"]}'
          ---
          
          ## Overview
          
          {method["description"]}
          
          ## Usage
          
          ```python
          from todo_sdk_python.todo_sdk import TodoClient
          
          client = TodoClient()
          {method["example"] if method["example"] else f'result = client.{method["name"]}(...)'}
          ```
          
          ## Signature
          
          ```python
          {method["name"]}{method["signature"]}
          ```
          """
                  
                  if method["args"]:
                      method_content += "\n## Parameters\n\n"
                      for arg_name, arg_desc in method["args"].items():
                          method_content += f'<ParamField path="{arg_name}" type="any" required>\n  {arg_desc}\n</ParamField>\n\n'
                  
                  if method["returns"]:
                      method_content += f"\n## Returns\n\n{method['returns']}\n"
                  
                  with open(docs_dir / f"{method['name']}.mdx", "w") as f:
                      f.write(method_content)
              
              print(f"Generated SDK documentation in {docs_dir}")
              return len(methods)
          
          if __name__ == "__main__":
              num_methods = generate_mdx()
              print(f"Documented {num_methods} methods")
          SCRIPT_END
          
          python generate_sdk_docs.py

      - name: Update docs.json navigation
        run: |
          cat > update_sdk_navigation.py << 'SCRIPT_END'
          import json
          
          with open("docs/docs.json", "r") as f:
              config = json.load(f)
          
          # Find or create SDK tab
          sdk_tab_exists = False
          for tab in config["navigation"]["tabs"]:
              if tab["tab"] == "SDK Reference":
                  sdk_tab_exists = True
                  # Update groups
                  tab["groups"] = [
                      {
                          "group": "Python SDK",
                          "pages": [
                              "sdk-reference/introduction",
                              "sdk-reference/client",
                              "sdk-reference/get_todo",
                              "sdk-reference/create_todo"
                          ]
                      }
                  ]
                  break
          
          if not sdk_tab_exists:
              config["navigation"]["tabs"].append({
                  "tab": "SDK Reference",
                  "groups": [
                      {
                          "group": "Python SDK",
                          "pages": [
                              "sdk-reference/introduction",
                              "sdk-reference/client",
                              "sdk-reference/get_todo",
                              "sdk-reference/create_todo"
                          ]
                      }
                  ]
              })
          
          with open("docs/docs.json", "w") as f:
              json.dump(config, f, indent=2)
          
          print("Navigation updated successfully")
          SCRIPT_END
          
          python update_sdk_navigation.py

      - name: Configure git
        working-directory: docs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for changes
        id: check_changes
        working-directory: docs
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Files changed:"
            git status --short
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi

      - name: Commit and push changes
        if: steps.check_changes.outputs.changes == 'true'
        working-directory: docs
        run: |
          git add .
          git commit -m "Auto-update SDK documentation from todo-sdk-python
          
          - Updated SDK reference documentation
          - Regenerated method documentation pages
          - Added Python SDK examples
          
          Source: ${{ github.event.head_commit.message }}
          Commit: ${{ github.sha }}"
          
          git push origin main
          echo "Documentation updated successfully"
